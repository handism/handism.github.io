{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","library","add","fas","tags","class","map","node","to","fields","slug","frontmatter","title","icon","birthTime","changeTime","kebabCase","excerpt","pageQuery"],"mappings":"2FAAA,2JAwFeA,UA7EF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAMf,OAFAK,IAAQC,IAAIC,KAGV,kBAAC,IAAD,CAAQC,KAAMV,EAAYU,MACxB,yBAAKC,MAAM,wBACT,yBAAKA,MAAM,WACT,4BAAKL,GACJF,EAAMQ,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACT,yBAAKF,MAAM,SACT,yBAAKA,MAAM,eACT,4BACE,kBAAC,IAAD,CAAMG,GAAID,EAAKE,OAAOC,MAAOH,EAAKI,YAAYC,SAGlD,yBAAKP,MAAM,cACT,0BAAMA,MAAM,QACV,kBAAC,IAAD,CAAiBQ,KAAM,CAAC,MAAO,WAC/B,0BAAMR,MAAM,cAAcE,EAAKE,OAAOK,YAExC,0BAAMT,MAAM,QACV,kBAAC,IAAD,CAAiBQ,KAAM,CAAC,MAAO,aAC/B,0BAAMR,MAAM,uBACTE,EAAKE,OAAOM,aAIjB,yBAAKV,MAAM,QACRE,EAAKI,YAAYP,KAAKE,KAAI,SAAAV,GAAG,OAC5B,0BAAMS,MAAM,OACV,kBAAC,IAAD,CAAiBQ,KAAM,CAAC,MAAO,SAC/B,kBAAC,IAAD,CAAML,GAAE,SAAWQ,IAAUpB,GAArB,KAA+BA,SAM/C,yBAAKS,MAAM,iBACT,2BAAIE,EAAKU,kBAmClB,IAAMC,EAAS","file":"component---src-templates-tags-js-cfcd64b4a6ba5c2635b6.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Layout from \"../components/layout\"\r\nimport kebabCase from \"lodash/kebabCase\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\"\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n  const { tag } = pageContext\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? \"\" : \"s\"\r\n  } tagged with \"${tag}\"`\r\n\r\n  library.add(fas) // FontAwesomeのライブラリ読み込み\r\n\r\n  return (\r\n    <Layout tags={pageContext.tags}>\r\n      <div class=\"content-sidebar-wrap\">\r\n        <div class=\"content\">\r\n          <h2>{tagHeader}</h2>\r\n          {edges.map(({ node }) => (\r\n            <div class=\"entry\">\r\n              <div class=\"entry-title\">\r\n                <h2>\r\n                  <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\r\n                </h2>\r\n              </div>\r\n              <div class=\"entry-meta\">\r\n                <span class=\"time\">\r\n                  <FontAwesomeIcon icon={[\"fas\", \"clock\"]} />\r\n                  <time class=\"entry-time\">{node.fields.birthTime}</time>\r\n                </span>\r\n                <span class=\"time\">\r\n                  <FontAwesomeIcon icon={[\"fas\", \"history\"]} />\r\n                  <time class=\"entry-modified-time\">\r\n                    {node.fields.changeTime}\r\n                  </time>\r\n                </span>\r\n\r\n                <div class=\"tags\">\r\n                  {node.frontmatter.tags.map(tag => (\r\n                    <span class=\"tag\">\r\n                      <FontAwesomeIcon icon={[\"fas\", \"tag\"]} />\r\n                      <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"entry-content\">\r\n                <p>{node.excerpt}</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [fields___birthTime], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            birthTime(formatString: \"YYYY/MM/DD/\")\r\n            changeTime(formatString: \"YYYY/MM/DD/\")\r\n          }\r\n          frontmatter {\r\n            title\r\n            tags\r\n          }\r\n          excerpt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}